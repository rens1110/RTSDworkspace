/**
 * Source file for the MainModel model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 

MainModel::MainModel() :
    Recursion<CSProcess>()
{
  SETNAME(this, "MainModel");

  // Initialize channels
  myProducerC1_to_Consumer1CChannel = new UnbufferedChannel<bool, One2In, Out2One>();
  myProducerC2_to_Consumer2CChannel = new UnbufferedChannel<bool, One2In, Out2One>();
  myProducerC3_to_Consumer3CChannel = new UnbufferedChannel<bool, One2In, Out2One>();

  // Initialize model objects
  myConsumer1 = new Consumer1::Consumer1(myProducerC1_to_Consumer1CChannel);
  SETNAME(myConsumer1, "Consumer1");
  myConsumer2 = new Consumer2::Consumer2(myProducerC2_to_Consumer2CChannel);
  SETNAME(myConsumer2, "Consumer2");
  myConsumer3 = new Consumer3::Consumer3(myProducerC3_to_Consumer3CChannel);
  SETNAME(myConsumer3, "Consumer3");
  myProducer = new Producer::Producer(myProducerC1_to_Consumer1CChannel, myProducerC2_to_Consumer2CChannel, myProducerC3_to_Consumer3CChannel);
  SETNAME(myProducer, "Producer");

  // Set conditions for the guarded objects that are not in a Sequential group
  AltIfOption<int>* myConsumer1_guard = new AltIfOption<int>(myConsumer1, std::bind(&MainModel::Consumer1GuardEvaluate, this));
  SETNAME(myConsumer1_guard, "Consumer1-guard");
  AltIfOption<int>* myConsumer2_guard = new AltIfOption<int>(myConsumer2, std::bind(&MainModel::Consumer2GuardEvaluate, this));
  SETNAME(myConsumer2_guard, "Consumer2-guard");
  AltIfOption<int>* myConsumer3_guard = new AltIfOption<int>(myConsumer3, std::bind(&MainModel::Consumer3GuardEvaluate, this));
  SETNAME(myConsumer3_guard, "Consumer3-guard");
  // Create ALTERNATIVE group
  myALTERNATIVE = new Alternative(
    true,
    (CSPConstruct *) myConsumer3_guard,
    (CSPConstruct *) myConsumer2_guard,
    (CSPConstruct *) myConsumer1_guard,
    NULL
  );
  SETNAME(myALTERNATIVE, "ALTERNATIVE");

  // Create PARALLEL group
  myPARALLEL = new Parallel(
    (CSPConstruct *) myProducer,
    (CSPConstruct *) myALTERNATIVE,
    NULL
  );
  SETNAME(myPARALLEL, "PARALLEL");

  // Register PARALLEL as top-level recursive object
  setToActivate(myPARALLEL);
  setEvaluateCondition(true);


  // protected region constructor on begin
  // protected region constructor end
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end

  // Destroy model groups
  delete myALTERNATIVE;
  delete myPARALLEL;

  // Destroy model objects
  delete myProducer;
  delete myConsumer3;
  delete myConsumer2;
  delete myConsumer1;

  // Destroy channels
  delete myProducerC1_to_Consumer1CChannel;
  delete myProducerC2_to_Consumer2CChannel;
  delete myProducerC3_to_Consumer3CChannel;
}


bool MainModel::Consumer1GuardEvaluate()
{
  return ChVar1==true;
}

bool MainModel::Consumer2GuardEvaluate()
{
  return ChVar2==true;
}

bool MainModel::Consumer3GuardEvaluate()
{
  return ChVar3==true;
}

// protected region additional functions on begin
// protected region additional functions end

// Close namespace(s)
} 
